package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.ui.client.hud.element.elements.Notification
import net.ccbluex.liquidbounce.utils.ClientUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0CPacketInput
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import java.util.*

// part of custom disabler to avoid confusion, that it would ACTUALLY disable miniblox ac
// -enorsu

@ModuleInfo(name = "MiniBloxSupport", description = "Allows you to play on MiniBlox", category = ModuleCategory.EXPLOIT)
class MiniBloxSupport : Module() {


    private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()

    override fun onEnable() {
        packetQueue.clear()
        ClientUtils.displayChatMessage("§7[§3§lMiniBlox§7]§f reconnect!")
        LiquidBounce.hud.addNotification(Notification("Please reconnect for MiniBloxSupport to work!", 2000L))

    }

    override fun onDisable() {
        packetQueue.clear()
    }
    private val debugValue = BoolValue("Debug", false)

    fun debug(s: String, force: Boolean = false) {
        if (debugValue.get() || force)
            ClientUtils.displayChatMessage("§7[§3§lMiniBlox§7]§f $s")

    }

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        // Thanks panagiotis3149 for methode!!!!!!
        // https://github.com/7GrandDadPGN/MinibloxTranslationLayer
        if (packet is C03PacketPlayer) {
            debug("Added C0CInput to SendQueue")
            mc.netHandler.addToSendQueue(
                C0CPacketInput(
                    mc.thePlayer.moveStrafing,
                    mc.thePlayer.moveForward,
                    mc.thePlayer.movementInput.jump,
                    mc.thePlayer.movementInput.sneak
                )
            )


        }

    }


}
